type TX @entity {
  id: ID!
  createdAt: String!
}
# TOP HATS MAY BE UNNECESSARY
# Entity that recursively maps an TopHat's entire tree
type TopHatTree @entity {
  id: ID!
  createdAt: String!
  owner: Bytes!
  subHats: [HatTree!]
}
# Finite TopHat data
type TopHat @entity {
  id: ID!
  createdAt: String!
  owner: Bytes!
  subHats: [HatTree!]
}
# Entity that recursively maps an Hat's tree
type HatTree @entity {
  id: ID!
  createdAt: String!
  name: String
  description: String
  imageUrl: String
  # wearer: [WearerTransferReceipt!]
  subHats: [HatTree!]
}
# Finite Hat data
type Hat @entity {
  id: ID!
  createdAt: String!
  # wearerStatus: String!
  name: String
  description: String
  imageUrl: String
  # wearer: Wearer
  wearers: [Wearer!]
}(
# HatToken vs Hat (Type)
type HatToken @entity {

}

type Wearer @entity {
  id: ID!
  name: String!
  age: Int!
  tx: TX!
}

type WearerProfile @entity {
  id: ID!
  name: String!
  age: Int!
  tx: TX!
  allHats: [Hat!]
}

type WearerTransferReceipt @entity {
  id: ID!
  transferedAt: String!
  txReceipt: Bytes!
  hatOwner: TopHat! 
  wearer: Bytes!
}
