type Hat @entity {
  id: ID!
  prettyId: String!
  status: Boolean!
  createdAt: BigInt
  details: String!
  detailsMetaData: HatDetailsMetaData
  maxSupply: BigInt!
  eligibility: String!
  toggle: String!
  mutable: Boolean!
  imageUri: String!
  levelAtLocalTree: Int!
  currentSupply: BigInt!
  tree: Tree!
  wearers: [Wearer!]!
  admin: Hat!
  badStandings: [Wearer!]!
  claimableBy: [ClaimsHatter!]! @derivedFrom(field: "claimableHats")
  claimableForBy: [ClaimsHatter!]! @derivedFrom(field: "claimableForHats")
  linkRequestFromTree: [Tree!]! @derivedFrom(field: "requestedLinkToHat")
  subHats: [Hat!]! @derivedFrom(field: "admin")
  linkedTrees: [Tree!]! @derivedFrom(field: "linkedToHat")
  events: [HatsEvent!]! @derivedFrom(field: "hat")
}

type Wearer @entity {
  id: ID!
  currentHats: [Hat!]! @derivedFrom(field: "wearers")
  mintEvent: [HatMintedEvent!]! @derivedFrom(field: "wearer")
  burnEvent: [HatBurnedEvent!]! @derivedFrom(field: "wearer")
}

type Tree @entity {
  "Tree ID is its top hat domain - first 4 bytes of the top hat ID"
  id: ID!
  childOfTree: Tree
  linkedToHat: Hat
  requestedLinkToTree: Tree
  requestedLinkToHat: Hat
  linkRequestFromTree: [Tree!]! @derivedFrom(field: "requestedLinkToTree")
  hats: [Hat!]! @derivedFrom(field: "tree")
  parentOfTrees: [Tree!]! @derivedFrom(field: "childOfTree")
  events: [HatsEvent!]! @derivedFrom(field: "tree")
}

interface HatsEvent {
  id: ID!
  tree: Tree!
  hat: Hat!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
}

type HatCreatedEvent implements HatsEvent @entity {
  id: ID!
  tree: Tree!
  hat: Hat!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  hatDetails: String!
  hatMaxSupply: BigInt!
  hatEligibility: String!
  hatToggle: String!
  hatMutable: Boolean!
  hatImageUri: String!
}

type HatMintedEvent implements HatsEvent @entity {
  id: ID!
  tree: Tree!
  hat: Hat!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  wearer: Wearer!
  operator: String!
}

type HatBurnedEvent implements HatsEvent @entity {
  id: ID!
  tree: Tree!
  hat: Hat!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  wearer: Wearer!
  operator: String!
}

type HatStatusChangedEvent implements HatsEvent @entity {
  id: ID!
  tree: Tree!
  hat: Hat!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  hatNewStatus: Boolean!
}

type HatDetailsChangedEvent implements HatsEvent @entity {
  id: ID!
  tree: Tree!
  hat: Hat!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  hatNewDetails: String!
}

type HatEligibilityChangedEvent implements HatsEvent @entity {
  id: ID!
  tree: Tree!
  hat: Hat!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  hatNewEligibility: String!
}

type HatToggleChangedEvent implements HatsEvent @entity {
  id: ID!
  tree: Tree!
  hat: Hat!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  hatNewToggle: String!
}

type HatMutabilityChangedEvent implements HatsEvent @entity {
  id: ID!
  tree: Tree!
  hat: Hat!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
}

type HatMaxSupplyChangedEvent implements HatsEvent @entity {
  id: ID!
  tree: Tree!
  hat: Hat!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  hatNewMaxSupply: BigInt!
}

type HatImageURIChangedEvent implements HatsEvent @entity {
  id: ID!
  tree: Tree!
  hat: Hat!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  hatNewImageURI: String!
}

type TopHatLinkRequestedEvent implements HatsEvent @entity {
  "tree field is the tree that is being linked, hat field is the tree top hat"
  id: ID!
  tree: Tree!
  hat: Hat!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  newAdmin: Hat!
}

type TopHatLinkedEvent implements HatsEvent @entity {
  "tree field is the tree that is being linked, hat field is the tree top hat"
  id: ID!
  tree: Tree!
  hat: Hat!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  newAdmin: Hat!
}

type WearerStandingChangedEvent implements HatsEvent @entity {
  id: ID!
  tree: Tree!
  hat: Hat!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  wearer: Wearer!
  wearerStanding: Boolean!
}

type ClaimsHatter @entity {
  id: ID!
  claimableHats: [Hat!]!
  claimableForHats: [Hat!]!
}

type HatDetailsMetaData @entity {
  id: ID!
  type: String!
  name: String
  description: String
  "responsability fields"
  responsibilityLabels: [String!]
  responsibilityDescriptions: [String!]
  responsibilityLinks: [String!]
  responsibilityImageUrls: [String!]
  "authority fields"
  authorityLabels: [String!]
  authorityDescriptions: [String!]
  authorityLinks: [String!]
  authorityImageUrls: [String!]
  authorityGates: [String!]
}
