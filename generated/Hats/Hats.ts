// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class HatCreated extends ethereum.Event {
  get params(): HatCreated__Params {
    return new HatCreated__Params(this);
  }
}

export class HatCreated__Params {
  _event: HatCreated;

  constructor(event: HatCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get details(): string {
    return this._event.parameters[1].value.toString();
  }

  get maxSupply(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get eligibility(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get toggle(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get mutable_(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }

  get imageURI(): string {
    return this._event.parameters[6].value.toString();
  }
}

export class HatDetailsChanged extends ethereum.Event {
  get params(): HatDetailsChanged__Params {
    return new HatDetailsChanged__Params(this);
  }
}

export class HatDetailsChanged__Params {
  _event: HatDetailsChanged;

  constructor(event: HatDetailsChanged) {
    this._event = event;
  }

  get hatId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newDetails(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class HatEligibilityChanged extends ethereum.Event {
  get params(): HatEligibilityChanged__Params {
    return new HatEligibilityChanged__Params(this);
  }
}

export class HatEligibilityChanged__Params {
  _event: HatEligibilityChanged;

  constructor(event: HatEligibilityChanged) {
    this._event = event;
  }

  get hatId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newEligibility(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class HatImageURIChanged extends ethereum.Event {
  get params(): HatImageURIChanged__Params {
    return new HatImageURIChanged__Params(this);
  }
}

export class HatImageURIChanged__Params {
  _event: HatImageURIChanged;

  constructor(event: HatImageURIChanged) {
    this._event = event;
  }

  get hatId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newImageURI(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class HatMaxSupplyChanged extends ethereum.Event {
  get params(): HatMaxSupplyChanged__Params {
    return new HatMaxSupplyChanged__Params(this);
  }
}

export class HatMaxSupplyChanged__Params {
  _event: HatMaxSupplyChanged;

  constructor(event: HatMaxSupplyChanged) {
    this._event = event;
  }

  get hatId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newMaxSupply(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class HatMutabilityChanged extends ethereum.Event {
  get params(): HatMutabilityChanged__Params {
    return new HatMutabilityChanged__Params(this);
  }
}

export class HatMutabilityChanged__Params {
  _event: HatMutabilityChanged;

  constructor(event: HatMutabilityChanged) {
    this._event = event;
  }

  get hatId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class HatStatusChanged extends ethereum.Event {
  get params(): HatStatusChanged__Params {
    return new HatStatusChanged__Params(this);
  }
}

export class HatStatusChanged__Params {
  _event: HatStatusChanged;

  constructor(event: HatStatusChanged) {
    this._event = event;
  }

  get hatId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newStatus(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class HatToggleChanged extends ethereum.Event {
  get params(): HatToggleChanged__Params {
    return new HatToggleChanged__Params(this);
  }
}

export class HatToggleChanged__Params {
  _event: HatToggleChanged;

  constructor(event: HatToggleChanged) {
    this._event = event;
  }

  get hatId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newToggle(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TopHatLinkRequested extends ethereum.Event {
  get params(): TopHatLinkRequested__Params {
    return new TopHatLinkRequested__Params(this);
  }
}

export class TopHatLinkRequested__Params {
  _event: TopHatLinkRequested;

  constructor(event: TopHatLinkRequested) {
    this._event = event;
  }

  get domain(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newAdmin(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TopHatLinked extends ethereum.Event {
  get params(): TopHatLinked__Params {
    return new TopHatLinked__Params(this);
  }
}

export class TopHatLinked__Params {
  _event: TopHatLinked;

  constructor(event: TopHatLinked) {
    this._event = event;
  }

  get domain(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newAdmin(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WearerStandingChanged extends ethereum.Event {
  get params(): WearerStandingChanged__Params {
    return new WearerStandingChanged__Params(this);
  }
}

export class WearerStandingChanged__Params {
  _event: WearerStandingChanged;

  constructor(event: WearerStandingChanged) {
    this._event = event;
  }

  get hatId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get wearer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get wearerStanding(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Hats__viewHatResult {
  value0: string;
  value1: BigInt;
  value2: BigInt;
  value3: Address;
  value4: Address;
  value5: string;
  value6: i32;
  value7: boolean;
  value8: boolean;

  constructor(
    value0: string,
    value1: BigInt,
    value2: BigInt,
    value3: Address,
    value4: Address,
    value5: string,
    value6: i32,
    value7: boolean,
    value8: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromString(this.value5));
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    return map;
  }

  getDetails(): string {
    return this.value0;
  }

  getMaxSupply(): BigInt {
    return this.value1;
  }

  getSupply(): BigInt {
    return this.value2;
  }

  getEligibility(): Address {
    return this.value3;
  }

  getToggle(): Address {
    return this.value4;
  }

  getImageURI(): string {
    return this.value5;
  }

  getLastHatId(): i32 {
    return this.value6;
  }

  getMutable_(): boolean {
    return this.value7;
  }

  getActive(): boolean {
    return this.value8;
  }
}

export class Hats extends ethereum.SmartContract {
  static bind(address: Address): Hats {
    return new Hats("Hats", address);
  }

  badStandings(param0: BigInt, param1: Address): boolean {
    let result = super.call(
      "badStandings",
      "badStandings(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ]
    );

    return result[0].toBoolean();
  }

  try_badStandings(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "badStandings",
      "badStandings(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(_wearer: Address, _hatId: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_wearer),
        ethereum.Value.fromUnsignedBigInt(_hatId),
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(_wearer: Address, _hatId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_wearer),
        ethereum.Value.fromUnsignedBigInt(_hatId),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(owners: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(owners),
        ethereum.Value.fromUnsignedBigIntArray(ids),
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    owners: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(owners),
        ethereum.Value.fromUnsignedBigIntArray(ids),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  baseImageURI(): string {
    let result = super.call("baseImageURI", "baseImageURI():(string)", []);

    return result[0].toString();
  }

  try_baseImageURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseImageURI", "baseImageURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  batchCreateHats(
    _admins: Array<BigInt>,
    _details: Array<string>,
    _maxSupplies: Array<BigInt>,
    _eligibilityModules: Array<Address>,
    _toggleModules: Array<Address>,
    _mutables: Array<boolean>,
    _imageURIs: Array<string>
  ): boolean {
    let result = super.call(
      "batchCreateHats",
      "batchCreateHats(uint256[],string[],uint32[],address[],address[],bool[],string[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigIntArray(_admins),
        ethereum.Value.fromStringArray(_details),
        ethereum.Value.fromUnsignedBigIntArray(_maxSupplies),
        ethereum.Value.fromAddressArray(_eligibilityModules),
        ethereum.Value.fromAddressArray(_toggleModules),
        ethereum.Value.fromBooleanArray(_mutables),
        ethereum.Value.fromStringArray(_imageURIs),
      ]
    );

    return result[0].toBoolean();
  }

  try_batchCreateHats(
    _admins: Array<BigInt>,
    _details: Array<string>,
    _maxSupplies: Array<BigInt>,
    _eligibilityModules: Array<Address>,
    _toggleModules: Array<Address>,
    _mutables: Array<boolean>,
    _imageURIs: Array<string>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "batchCreateHats",
      "batchCreateHats(uint256[],string[],uint32[],address[],address[],bool[],string[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigIntArray(_admins),
        ethereum.Value.fromStringArray(_details),
        ethereum.Value.fromUnsignedBigIntArray(_maxSupplies),
        ethereum.Value.fromAddressArray(_eligibilityModules),
        ethereum.Value.fromAddressArray(_toggleModules),
        ethereum.Value.fromBooleanArray(_mutables),
        ethereum.Value.fromStringArray(_imageURIs),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  batchMintHats(_hatIds: Array<BigInt>, _wearers: Array<Address>): boolean {
    let result = super.call(
      "batchMintHats",
      "batchMintHats(uint256[],address[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigIntArray(_hatIds),
        ethereum.Value.fromAddressArray(_wearers),
      ]
    );

    return result[0].toBoolean();
  }

  try_batchMintHats(
    _hatIds: Array<BigInt>,
    _wearers: Array<Address>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "batchMintHats",
      "batchMintHats(uint256[],address[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigIntArray(_hatIds),
        ethereum.Value.fromAddressArray(_wearers),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  buildHatId(_admin: BigInt, _newHat: i32): BigInt {
    let result = super.call(
      "buildHatId",
      "buildHatId(uint256,uint16):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_admin),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_newHat)),
      ]
    );

    return result[0].toBigInt();
  }

  try_buildHatId(_admin: BigInt, _newHat: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "buildHatId",
      "buildHatId(uint256,uint16):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_admin),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_newHat)),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkHatStatus(_hatId: BigInt): boolean {
    let result = super.call(
      "checkHatStatus",
      "checkHatStatus(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_hatId)]
    );

    return result[0].toBoolean();
  }

  try_checkHatStatus(_hatId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkHatStatus",
      "checkHatStatus(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_hatId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkHatWearerStatus(_hatId: BigInt, _wearer: Address): boolean {
    let result = super.call(
      "checkHatWearerStatus",
      "checkHatWearerStatus(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_hatId),
        ethereum.Value.fromAddress(_wearer),
      ]
    );

    return result[0].toBoolean();
  }

  try_checkHatWearerStatus(
    _hatId: BigInt,
    _wearer: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkHatWearerStatus",
      "checkHatWearerStatus(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_hatId),
        ethereum.Value.fromAddress(_wearer),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  createHat(
    _admin: BigInt,
    _details: string,
    _maxSupply: BigInt,
    _eligibility: Address,
    _toggle: Address,
    _mutable: boolean,
    _imageURI: string
  ): BigInt {
    let result = super.call(
      "createHat",
      "createHat(uint256,string,uint32,address,address,bool,string):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_admin),
        ethereum.Value.fromString(_details),
        ethereum.Value.fromUnsignedBigInt(_maxSupply),
        ethereum.Value.fromAddress(_eligibility),
        ethereum.Value.fromAddress(_toggle),
        ethereum.Value.fromBoolean(_mutable),
        ethereum.Value.fromString(_imageURI),
      ]
    );

    return result[0].toBigInt();
  }

  try_createHat(
    _admin: BigInt,
    _details: string,
    _maxSupply: BigInt,
    _eligibility: Address,
    _toggle: Address,
    _mutable: boolean,
    _imageURI: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createHat",
      "createHat(uint256,string,uint32,address,address,bool,string):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_admin),
        ethereum.Value.fromString(_details),
        ethereum.Value.fromUnsignedBigInt(_maxSupply),
        ethereum.Value.fromAddress(_eligibility),
        ethereum.Value.fromAddress(_toggle),
        ethereum.Value.fromBoolean(_mutable),
        ethereum.Value.fromString(_imageURI),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAdminAtLevel(_hatId: BigInt, _level: i32): BigInt {
    let result = super.call(
      "getAdminAtLevel",
      "getAdminAtLevel(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_hatId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_level)),
      ]
    );

    return result[0].toBigInt();
  }

  try_getAdminAtLevel(
    _hatId: BigInt,
    _level: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAdminAtLevel",
      "getAdminAtLevel(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_hatId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_level)),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getHatLevel(_hatId: BigInt): i32 {
    let result = super.call("getHatLevel", "getHatLevel(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(_hatId),
    ]);

    return result[0].toI32();
  }

  try_getHatLevel(_hatId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("getHatLevel", "getHatLevel(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(_hatId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getImageURIForHat(_hatId: BigInt): string {
    let result = super.call(
      "getImageURIForHat",
      "getImageURIForHat(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(_hatId)]
    );

    return result[0].toString();
  }

  try_getImageURIForHat(_hatId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getImageURIForHat",
      "getImageURIForHat(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(_hatId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getNextId(_admin: BigInt): BigInt {
    let result = super.call("getNextId", "getNextId(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_admin),
    ]);

    return result[0].toBigInt();
  }

  try_getNextId(_admin: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNextId", "getNextId(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_admin),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTippyTophatDomain(_topHatDomain: BigInt): BigInt {
    let result = super.call(
      "getTippyTophatDomain",
      "getTippyTophatDomain(uint32):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(_topHatDomain)]
    );

    return result[0].toBigInt();
  }

  try_getTippyTophatDomain(_topHatDomain: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTippyTophatDomain",
      "getTippyTophatDomain(uint32):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(_topHatDomain)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTophatDomain(_hatId: BigInt): BigInt {
    let result = super.call(
      "getTophatDomain",
      "getTophatDomain(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(_hatId)]
    );

    return result[0].toBigInt();
  }

  try_getTophatDomain(_hatId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTophatDomain",
      "getTophatDomain(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(_hatId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTreeAdminAtLevel(_hatId: BigInt, _level: i32): BigInt {
    let result = super.call(
      "getTreeAdminAtLevel",
      "getTreeAdminAtLevel(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_hatId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_level)),
      ]
    );

    return result[0].toBigInt();
  }

  try_getTreeAdminAtLevel(
    _hatId: BigInt,
    _level: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTreeAdminAtLevel",
      "getTreeAdminAtLevel(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_hatId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_level)),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hatSupply(_hatId: BigInt): BigInt {
    let result = super.call("hatSupply", "hatSupply(uint256):(uint32)", [
      ethereum.Value.fromUnsignedBigInt(_hatId),
    ]);

    return result[0].toBigInt();
  }

  try_hatSupply(_hatId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("hatSupply", "hatSupply(uint256):(uint32)", [
      ethereum.Value.fromUnsignedBigInt(_hatId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isAdminOfHat(_user: Address, _hatId: BigInt): boolean {
    let result = super.call(
      "isAdminOfHat",
      "isAdminOfHat(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_hatId),
      ]
    );

    return result[0].toBoolean();
  }

  try_isAdminOfHat(
    _user: Address,
    _hatId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAdminOfHat",
      "isAdminOfHat(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_hatId),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(param0: Address, param1: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isEligible(_wearer: Address, _hatId: BigInt): boolean {
    let result = super.call(
      "isEligible",
      "isEligible(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_wearer),
        ethereum.Value.fromUnsignedBigInt(_hatId),
      ]
    );

    return result[0].toBoolean();
  }

  try_isEligible(
    _wearer: Address,
    _hatId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isEligible",
      "isEligible(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_wearer),
        ethereum.Value.fromUnsignedBigInt(_hatId),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isInGoodStanding(_wearer: Address, _hatId: BigInt): boolean {
    let result = super.call(
      "isInGoodStanding",
      "isInGoodStanding(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_wearer),
        ethereum.Value.fromUnsignedBigInt(_hatId),
      ]
    );

    return result[0].toBoolean();
  }

  try_isInGoodStanding(
    _wearer: Address,
    _hatId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isInGoodStanding",
      "isInGoodStanding(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_wearer),
        ethereum.Value.fromUnsignedBigInt(_hatId),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTopHat(_hatId: BigInt): boolean {
    let result = super.call("isTopHat", "isTopHat(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_hatId),
    ]);

    return result[0].toBoolean();
  }

  try_isTopHat(_hatId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isTopHat", "isTopHat(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_hatId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWearerOfHat(_user: Address, _hatId: BigInt): boolean {
    let result = super.call(
      "isWearerOfHat",
      "isWearerOfHat(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_hatId),
      ]
    );

    return result[0].toBoolean();
  }

  try_isWearerOfHat(
    _user: Address,
    _hatId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWearerOfHat",
      "isWearerOfHat(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_hatId),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastTopHatId(): BigInt {
    let result = super.call("lastTopHatId", "lastTopHatId():(uint32)", []);

    return result[0].toBigInt();
  }

  try_lastTopHatId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastTopHatId", "lastTopHatId():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  linkedTreeAdmins(param0: BigInt): BigInt {
    let result = super.call(
      "linkedTreeAdmins",
      "linkedTreeAdmins(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_linkedTreeAdmins(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "linkedTreeAdmins",
      "linkedTreeAdmins(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  linkedTreeRequests(param0: BigInt): BigInt {
    let result = super.call(
      "linkedTreeRequests",
      "linkedTreeRequests(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_linkedTreeRequests(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "linkedTreeRequests",
      "linkedTreeRequests(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintHat(_hatId: BigInt, _wearer: Address): boolean {
    let result = super.call("mintHat", "mintHat(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_hatId),
      ethereum.Value.fromAddress(_wearer),
    ]);

    return result[0].toBoolean();
  }

  try_mintHat(_hatId: BigInt, _wearer: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("mintHat", "mintHat(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_hatId),
      ethereum.Value.fromAddress(_wearer),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintTopHat(_target: Address, _details: string, _imageURI: string): BigInt {
    let result = super.call(
      "mintTopHat",
      "mintTopHat(address,string,string):(uint256)",
      [
        ethereum.Value.fromAddress(_target),
        ethereum.Value.fromString(_details),
        ethereum.Value.fromString(_imageURI),
      ]
    );

    return result[0].toBigInt();
  }

  try_mintTopHat(
    _target: Address,
    _details: string,
    _imageURI: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintTopHat",
      "mintTopHat(address,string,string):(uint256)",
      [
        ethereum.Value.fromAddress(_target),
        ethereum.Value.fromString(_details),
        ethereum.Value.fromString(_imageURI),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  noCircularLinkage(_topHatDomain: BigInt, _linkedAdmin: BigInt): boolean {
    let result = super.call(
      "noCircularLinkage",
      "noCircularLinkage(uint32,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_topHatDomain),
        ethereum.Value.fromUnsignedBigInt(_linkedAdmin),
      ]
    );

    return result[0].toBoolean();
  }

  try_noCircularLinkage(
    _topHatDomain: BigInt,
    _linkedAdmin: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "noCircularLinkage",
      "noCircularLinkage(uint32,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_topHatDomain),
        ethereum.Value.fromUnsignedBigInt(_linkedAdmin),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  sameTippyTophatDomain(_topHatDomain: BigInt, _newAdminHat: BigInt): boolean {
    let result = super.call(
      "sameTippyTophatDomain",
      "sameTippyTophatDomain(uint32,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_topHatDomain),
        ethereum.Value.fromUnsignedBigInt(_newAdminHat),
      ]
    );

    return result[0].toBoolean();
  }

  try_sameTippyTophatDomain(
    _topHatDomain: BigInt,
    _newAdminHat: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "sameTippyTophatDomain",
      "sameTippyTophatDomain(uint32,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_topHatDomain),
        ethereum.Value.fromUnsignedBigInt(_newAdminHat),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setHatStatus(_hatId: BigInt, _newStatus: boolean): boolean {
    let result = super.call(
      "setHatStatus",
      "setHatStatus(uint256,bool):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_hatId),
        ethereum.Value.fromBoolean(_newStatus),
      ]
    );

    return result[0].toBoolean();
  }

  try_setHatStatus(
    _hatId: BigInt,
    _newStatus: boolean
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setHatStatus",
      "setHatStatus(uint256,bool):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_hatId),
        ethereum.Value.fromBoolean(_newStatus),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setHatWearerStatus(
    _hatId: BigInt,
    _wearer: Address,
    _eligible: boolean,
    _standing: boolean
  ): boolean {
    let result = super.call(
      "setHatWearerStatus",
      "setHatWearerStatus(uint256,address,bool,bool):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_hatId),
        ethereum.Value.fromAddress(_wearer),
        ethereum.Value.fromBoolean(_eligible),
        ethereum.Value.fromBoolean(_standing),
      ]
    );

    return result[0].toBoolean();
  }

  try_setHatWearerStatus(
    _hatId: BigInt,
    _wearer: Address,
    _eligible: boolean,
    _standing: boolean
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setHatWearerStatus",
      "setHatWearerStatus(uint256,address,bool,bool):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_hatId),
        ethereum.Value.fromAddress(_wearer),
        ethereum.Value.fromBoolean(_eligible),
        ethereum.Value.fromBoolean(_standing),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  uri(id: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id),
    ]);

    return result[0].toString();
  }

  try_uri(id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  viewHat(_hatId: BigInt): Hats__viewHatResult {
    let result = super.call(
      "viewHat",
      "viewHat(uint256):(string,uint32,uint32,address,address,string,uint16,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(_hatId)]
    );

    return new Hats__viewHatResult(
      result[0].toString(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toString(),
      result[6].toI32(),
      result[7].toBoolean(),
      result[8].toBoolean()
    );
  }

  try_viewHat(_hatId: BigInt): ethereum.CallResult<Hats__viewHatResult> {
    let result = super.tryCall(
      "viewHat",
      "viewHat(uint256):(string,uint32,uint32,address,address,string,uint16,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(_hatId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Hats__viewHatResult(
        value[0].toString(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toString(),
        value[6].toI32(),
        value[7].toBoolean(),
        value[8].toBoolean()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _baseImageURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveLinkTopHatToTreeCall extends ethereum.Call {
  get inputs(): ApproveLinkTopHatToTreeCall__Inputs {
    return new ApproveLinkTopHatToTreeCall__Inputs(this);
  }

  get outputs(): ApproveLinkTopHatToTreeCall__Outputs {
    return new ApproveLinkTopHatToTreeCall__Outputs(this);
  }
}

export class ApproveLinkTopHatToTreeCall__Inputs {
  _call: ApproveLinkTopHatToTreeCall;

  constructor(call: ApproveLinkTopHatToTreeCall) {
    this._call = call;
  }

  get _topHatDomain(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newAdminHat(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveLinkTopHatToTreeCall__Outputs {
  _call: ApproveLinkTopHatToTreeCall;

  constructor(call: ApproveLinkTopHatToTreeCall) {
    this._call = call;
  }
}

export class BatchCreateHatsCall extends ethereum.Call {
  get inputs(): BatchCreateHatsCall__Inputs {
    return new BatchCreateHatsCall__Inputs(this);
  }

  get outputs(): BatchCreateHatsCall__Outputs {
    return new BatchCreateHatsCall__Outputs(this);
  }
}

export class BatchCreateHatsCall__Inputs {
  _call: BatchCreateHatsCall;

  constructor(call: BatchCreateHatsCall) {
    this._call = call;
  }

  get _admins(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _details(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get _maxSupplies(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _eligibilityModules(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get _toggleModules(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }

  get _mutables(): Array<boolean> {
    return this._call.inputValues[5].value.toBooleanArray();
  }

  get _imageURIs(): Array<string> {
    return this._call.inputValues[6].value.toStringArray();
  }
}

export class BatchCreateHatsCall__Outputs {
  _call: BatchCreateHatsCall;

  constructor(call: BatchCreateHatsCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BatchMintHatsCall extends ethereum.Call {
  get inputs(): BatchMintHatsCall__Inputs {
    return new BatchMintHatsCall__Inputs(this);
  }

  get outputs(): BatchMintHatsCall__Outputs {
    return new BatchMintHatsCall__Outputs(this);
  }
}

export class BatchMintHatsCall__Inputs {
  _call: BatchMintHatsCall;

  constructor(call: BatchMintHatsCall) {
    this._call = call;
  }

  get _hatIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _wearers(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class BatchMintHatsCall__Outputs {
  _call: BatchMintHatsCall;

  constructor(call: BatchMintHatsCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ChangeHatDetailsCall extends ethereum.Call {
  get inputs(): ChangeHatDetailsCall__Inputs {
    return new ChangeHatDetailsCall__Inputs(this);
  }

  get outputs(): ChangeHatDetailsCall__Outputs {
    return new ChangeHatDetailsCall__Outputs(this);
  }
}

export class ChangeHatDetailsCall__Inputs {
  _call: ChangeHatDetailsCall;

  constructor(call: ChangeHatDetailsCall) {
    this._call = call;
  }

  get _hatId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newDetails(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ChangeHatDetailsCall__Outputs {
  _call: ChangeHatDetailsCall;

  constructor(call: ChangeHatDetailsCall) {
    this._call = call;
  }
}

export class ChangeHatEligibilityCall extends ethereum.Call {
  get inputs(): ChangeHatEligibilityCall__Inputs {
    return new ChangeHatEligibilityCall__Inputs(this);
  }

  get outputs(): ChangeHatEligibilityCall__Outputs {
    return new ChangeHatEligibilityCall__Outputs(this);
  }
}

export class ChangeHatEligibilityCall__Inputs {
  _call: ChangeHatEligibilityCall;

  constructor(call: ChangeHatEligibilityCall) {
    this._call = call;
  }

  get _hatId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newEligibility(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ChangeHatEligibilityCall__Outputs {
  _call: ChangeHatEligibilityCall;

  constructor(call: ChangeHatEligibilityCall) {
    this._call = call;
  }
}

export class ChangeHatImageURICall extends ethereum.Call {
  get inputs(): ChangeHatImageURICall__Inputs {
    return new ChangeHatImageURICall__Inputs(this);
  }

  get outputs(): ChangeHatImageURICall__Outputs {
    return new ChangeHatImageURICall__Outputs(this);
  }
}

export class ChangeHatImageURICall__Inputs {
  _call: ChangeHatImageURICall;

  constructor(call: ChangeHatImageURICall) {
    this._call = call;
  }

  get _hatId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newImageURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ChangeHatImageURICall__Outputs {
  _call: ChangeHatImageURICall;

  constructor(call: ChangeHatImageURICall) {
    this._call = call;
  }
}

export class ChangeHatMaxSupplyCall extends ethereum.Call {
  get inputs(): ChangeHatMaxSupplyCall__Inputs {
    return new ChangeHatMaxSupplyCall__Inputs(this);
  }

  get outputs(): ChangeHatMaxSupplyCall__Outputs {
    return new ChangeHatMaxSupplyCall__Outputs(this);
  }
}

export class ChangeHatMaxSupplyCall__Inputs {
  _call: ChangeHatMaxSupplyCall;

  constructor(call: ChangeHatMaxSupplyCall) {
    this._call = call;
  }

  get _hatId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newMaxSupply(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ChangeHatMaxSupplyCall__Outputs {
  _call: ChangeHatMaxSupplyCall;

  constructor(call: ChangeHatMaxSupplyCall) {
    this._call = call;
  }
}

export class ChangeHatToggleCall extends ethereum.Call {
  get inputs(): ChangeHatToggleCall__Inputs {
    return new ChangeHatToggleCall__Inputs(this);
  }

  get outputs(): ChangeHatToggleCall__Outputs {
    return new ChangeHatToggleCall__Outputs(this);
  }
}

export class ChangeHatToggleCall__Inputs {
  _call: ChangeHatToggleCall;

  constructor(call: ChangeHatToggleCall) {
    this._call = call;
  }

  get _hatId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newToggle(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ChangeHatToggleCall__Outputs {
  _call: ChangeHatToggleCall;

  constructor(call: ChangeHatToggleCall) {
    this._call = call;
  }
}

export class CheckHatStatusCall extends ethereum.Call {
  get inputs(): CheckHatStatusCall__Inputs {
    return new CheckHatStatusCall__Inputs(this);
  }

  get outputs(): CheckHatStatusCall__Outputs {
    return new CheckHatStatusCall__Outputs(this);
  }
}

export class CheckHatStatusCall__Inputs {
  _call: CheckHatStatusCall;

  constructor(call: CheckHatStatusCall) {
    this._call = call;
  }

  get _hatId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CheckHatStatusCall__Outputs {
  _call: CheckHatStatusCall;

  constructor(call: CheckHatStatusCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CheckHatWearerStatusCall extends ethereum.Call {
  get inputs(): CheckHatWearerStatusCall__Inputs {
    return new CheckHatWearerStatusCall__Inputs(this);
  }

  get outputs(): CheckHatWearerStatusCall__Outputs {
    return new CheckHatWearerStatusCall__Outputs(this);
  }
}

export class CheckHatWearerStatusCall__Inputs {
  _call: CheckHatWearerStatusCall;

  constructor(call: CheckHatWearerStatusCall) {
    this._call = call;
  }

  get _hatId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _wearer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CheckHatWearerStatusCall__Outputs {
  _call: CheckHatWearerStatusCall;

  constructor(call: CheckHatWearerStatusCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CreateHatCall extends ethereum.Call {
  get inputs(): CreateHatCall__Inputs {
    return new CreateHatCall__Inputs(this);
  }

  get outputs(): CreateHatCall__Outputs {
    return new CreateHatCall__Outputs(this);
  }
}

export class CreateHatCall__Inputs {
  _call: CreateHatCall;

  constructor(call: CreateHatCall) {
    this._call = call;
  }

  get _admin(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _details(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _maxSupply(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _eligibility(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _toggle(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _mutable(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }

  get _imageURI(): string {
    return this._call.inputValues[6].value.toString();
  }
}

export class CreateHatCall__Outputs {
  _call: CreateHatCall;

  constructor(call: CreateHatCall) {
    this._call = call;
  }

  get newHatId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MakeHatImmutableCall extends ethereum.Call {
  get inputs(): MakeHatImmutableCall__Inputs {
    return new MakeHatImmutableCall__Inputs(this);
  }

  get outputs(): MakeHatImmutableCall__Outputs {
    return new MakeHatImmutableCall__Outputs(this);
  }
}

export class MakeHatImmutableCall__Inputs {
  _call: MakeHatImmutableCall;

  constructor(call: MakeHatImmutableCall) {
    this._call = call;
  }

  get _hatId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MakeHatImmutableCall__Outputs {
  _call: MakeHatImmutableCall;

  constructor(call: MakeHatImmutableCall) {
    this._call = call;
  }
}

export class MintHatCall extends ethereum.Call {
  get inputs(): MintHatCall__Inputs {
    return new MintHatCall__Inputs(this);
  }

  get outputs(): MintHatCall__Outputs {
    return new MintHatCall__Outputs(this);
  }
}

export class MintHatCall__Inputs {
  _call: MintHatCall;

  constructor(call: MintHatCall) {
    this._call = call;
  }

  get _hatId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _wearer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MintHatCall__Outputs {
  _call: MintHatCall;

  constructor(call: MintHatCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MintTopHatCall extends ethereum.Call {
  get inputs(): MintTopHatCall__Inputs {
    return new MintTopHatCall__Inputs(this);
  }

  get outputs(): MintTopHatCall__Outputs {
    return new MintTopHatCall__Outputs(this);
  }
}

export class MintTopHatCall__Inputs {
  _call: MintTopHatCall;

  constructor(call: MintTopHatCall) {
    this._call = call;
  }

  get _target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _details(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _imageURI(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class MintTopHatCall__Outputs {
  _call: MintTopHatCall;

  constructor(call: MintTopHatCall) {
    this._call = call;
  }

  get topHatId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RelinkTopHatWithinTreeCall extends ethereum.Call {
  get inputs(): RelinkTopHatWithinTreeCall__Inputs {
    return new RelinkTopHatWithinTreeCall__Inputs(this);
  }

  get outputs(): RelinkTopHatWithinTreeCall__Outputs {
    return new RelinkTopHatWithinTreeCall__Outputs(this);
  }
}

export class RelinkTopHatWithinTreeCall__Inputs {
  _call: RelinkTopHatWithinTreeCall;

  constructor(call: RelinkTopHatWithinTreeCall) {
    this._call = call;
  }

  get _topHatDomain(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newAdminHat(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RelinkTopHatWithinTreeCall__Outputs {
  _call: RelinkTopHatWithinTreeCall;

  constructor(call: RelinkTopHatWithinTreeCall) {
    this._call = call;
  }
}

export class RenounceHatCall extends ethereum.Call {
  get inputs(): RenounceHatCall__Inputs {
    return new RenounceHatCall__Inputs(this);
  }

  get outputs(): RenounceHatCall__Outputs {
    return new RenounceHatCall__Outputs(this);
  }
}

export class RenounceHatCall__Inputs {
  _call: RenounceHatCall;

  constructor(call: RenounceHatCall) {
    this._call = call;
  }

  get _hatId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RenounceHatCall__Outputs {
  _call: RenounceHatCall;

  constructor(call: RenounceHatCall) {
    this._call = call;
  }
}

export class RequestLinkTopHatToTreeCall extends ethereum.Call {
  get inputs(): RequestLinkTopHatToTreeCall__Inputs {
    return new RequestLinkTopHatToTreeCall__Inputs(this);
  }

  get outputs(): RequestLinkTopHatToTreeCall__Outputs {
    return new RequestLinkTopHatToTreeCall__Outputs(this);
  }
}

export class RequestLinkTopHatToTreeCall__Inputs {
  _call: RequestLinkTopHatToTreeCall;

  constructor(call: RequestLinkTopHatToTreeCall) {
    this._call = call;
  }

  get _topHatDomain(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _requestedAdminHat(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RequestLinkTopHatToTreeCall__Outputs {
  _call: RequestLinkTopHatToTreeCall;

  constructor(call: RequestLinkTopHatToTreeCall) {
    this._call = call;
  }
}

export class SetHatStatusCall extends ethereum.Call {
  get inputs(): SetHatStatusCall__Inputs {
    return new SetHatStatusCall__Inputs(this);
  }

  get outputs(): SetHatStatusCall__Outputs {
    return new SetHatStatusCall__Outputs(this);
  }
}

export class SetHatStatusCall__Inputs {
  _call: SetHatStatusCall;

  constructor(call: SetHatStatusCall) {
    this._call = call;
  }

  get _hatId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newStatus(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetHatStatusCall__Outputs {
  _call: SetHatStatusCall;

  constructor(call: SetHatStatusCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetHatWearerStatusCall extends ethereum.Call {
  get inputs(): SetHatWearerStatusCall__Inputs {
    return new SetHatWearerStatusCall__Inputs(this);
  }

  get outputs(): SetHatWearerStatusCall__Outputs {
    return new SetHatWearerStatusCall__Outputs(this);
  }
}

export class SetHatWearerStatusCall__Inputs {
  _call: SetHatWearerStatusCall;

  constructor(call: SetHatWearerStatusCall) {
    this._call = call;
  }

  get _hatId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _wearer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _eligible(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _standing(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class SetHatWearerStatusCall__Outputs {
  _call: SetHatWearerStatusCall;

  constructor(call: SetHatWearerStatusCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferHatCall extends ethereum.Call {
  get inputs(): TransferHatCall__Inputs {
    return new TransferHatCall__Inputs(this);
  }

  get outputs(): TransferHatCall__Outputs {
    return new TransferHatCall__Outputs(this);
  }
}

export class TransferHatCall__Inputs {
  _call: TransferHatCall;

  constructor(call: TransferHatCall) {
    this._call = call;
  }

  get _hatId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class TransferHatCall__Outputs {
  _call: TransferHatCall;

  constructor(call: TransferHatCall) {
    this._call = call;
  }
}

export class UnlinkTopHatFromTreeCall extends ethereum.Call {
  get inputs(): UnlinkTopHatFromTreeCall__Inputs {
    return new UnlinkTopHatFromTreeCall__Inputs(this);
  }

  get outputs(): UnlinkTopHatFromTreeCall__Outputs {
    return new UnlinkTopHatFromTreeCall__Outputs(this);
  }
}

export class UnlinkTopHatFromTreeCall__Inputs {
  _call: UnlinkTopHatFromTreeCall;

  constructor(call: UnlinkTopHatFromTreeCall) {
    this._call = call;
  }

  get _topHatDomain(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnlinkTopHatFromTreeCall__Outputs {
  _call: UnlinkTopHatFromTreeCall;

  constructor(call: UnlinkTopHatFromTreeCall) {
    this._call = call;
  }
}
