// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Hat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Hat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Hat must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Hat", id.toString(), this);
    }
  }

  static load(id: string): Hat | null {
    return changetype<Hat | null>(store.get("Hat", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prettyId(): string {
    let value = this.get("prettyId");
    return value!.toString();
  }

  set prettyId(value: string) {
    this.set("prettyId", Value.fromString(value));
  }

  get status(): boolean {
    let value = this.get("status");
    return value!.toBoolean();
  }

  set status(value: boolean) {
    this.set("status", Value.fromBoolean(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get details(): string {
    let value = this.get("details");
    return value!.toString();
  }

  set details(value: string) {
    this.set("details", Value.fromString(value));
  }

  get maxSupply(): BigInt {
    let value = this.get("maxSupply");
    return value!.toBigInt();
  }

  set maxSupply(value: BigInt) {
    this.set("maxSupply", Value.fromBigInt(value));
  }

  get eligibility(): string {
    let value = this.get("eligibility");
    return value!.toString();
  }

  set eligibility(value: string) {
    this.set("eligibility", Value.fromString(value));
  }

  get toggle(): string {
    let value = this.get("toggle");
    return value!.toString();
  }

  set toggle(value: string) {
    this.set("toggle", Value.fromString(value));
  }

  get mutable(): boolean {
    let value = this.get("mutable");
    return value!.toBoolean();
  }

  set mutable(value: boolean) {
    this.set("mutable", Value.fromBoolean(value));
  }

  get imageUri(): string {
    let value = this.get("imageUri");
    return value!.toString();
  }

  set imageUri(value: string) {
    this.set("imageUri", Value.fromString(value));
  }

  get level(): i32 {
    let value = this.get("level");
    return value!.toI32();
  }

  set level(value: i32) {
    this.set("level", Value.fromI32(value));
  }

  get currentSupply(): BigInt {
    let value = this.get("currentSupply");
    return value!.toBigInt();
  }

  set currentSupply(value: BigInt) {
    this.set("currentSupply", Value.fromBigInt(value));
  }

  get tree(): string {
    let value = this.get("tree");
    return value!.toString();
  }

  set tree(value: string) {
    this.set("tree", Value.fromString(value));
  }

  get wearers(): Array<string> {
    let value = this.get("wearers");
    return value!.toStringArray();
  }

  set wearers(value: Array<string>) {
    this.set("wearers", Value.fromStringArray(value));
  }

  get admin(): string {
    let value = this.get("admin");
    return value!.toString();
  }

  set admin(value: string) {
    this.set("admin", Value.fromString(value));
  }

  get subHats(): Array<string> {
    let value = this.get("subHats");
    return value!.toStringArray();
  }

  set subHats(value: Array<string>) {
    this.set("subHats", Value.fromStringArray(value));
  }

  get events(): Array<string> {
    let value = this.get("events");
    return value!.toStringArray();
  }

  set events(value: Array<string>) {
    this.set("events", Value.fromStringArray(value));
  }
}

export class Wearer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Wearer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Wearer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Wearer", id.toString(), this);
    }
  }

  static load(id: string): Wearer | null {
    return changetype<Wearer | null>(store.get("Wearer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currentHats(): Array<string> {
    let value = this.get("currentHats");
    return value!.toStringArray();
  }

  set currentHats(value: Array<string>) {
    this.set("currentHats", Value.fromStringArray(value));
  }

  get mintEvent(): Array<string> {
    let value = this.get("mintEvent");
    return value!.toStringArray();
  }

  set mintEvent(value: Array<string>) {
    this.set("mintEvent", Value.fromStringArray(value));
  }

  get burnEvent(): Array<string> {
    let value = this.get("burnEvent");
    return value!.toStringArray();
  }

  set burnEvent(value: Array<string>) {
    this.set("burnEvent", Value.fromStringArray(value));
  }
}

export class Tree extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Tree entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Tree must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Tree", id.toString(), this);
    }
  }

  static load(id: string): Tree | null {
    return changetype<Tree | null>(store.get("Tree", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hats(): Array<string> {
    let value = this.get("hats");
    return value!.toStringArray();
  }

  set hats(value: Array<string>) {
    this.set("hats", Value.fromStringArray(value));
  }

  get events(): Array<string> {
    let value = this.get("events");
    return value!.toStringArray();
  }

  set events(value: Array<string>) {
    this.set("events", Value.fromStringArray(value));
  }
}

export class HatCreatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HatCreatedEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HatCreatedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HatCreatedEvent", id.toString(), this);
    }
  }

  static load(id: string): HatCreatedEvent | null {
    return changetype<HatCreatedEvent | null>(store.get("HatCreatedEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tree(): string {
    let value = this.get("tree");
    return value!.toString();
  }

  set tree(value: string) {
    this.set("tree", Value.fromString(value));
  }

  get hat(): string {
    let value = this.get("hat");
    return value!.toString();
  }

  set hat(value: string) {
    this.set("hat", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value!.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get hatId(): string {
    let value = this.get("hatId");
    return value!.toString();
  }

  set hatId(value: string) {
    this.set("hatId", Value.fromString(value));
  }

  get hatDetails(): string {
    let value = this.get("hatDetails");
    return value!.toString();
  }

  set hatDetails(value: string) {
    this.set("hatDetails", Value.fromString(value));
  }

  get hatMaxSupply(): BigInt {
    let value = this.get("hatMaxSupply");
    return value!.toBigInt();
  }

  set hatMaxSupply(value: BigInt) {
    this.set("hatMaxSupply", Value.fromBigInt(value));
  }

  get hatEligibility(): string {
    let value = this.get("hatEligibility");
    return value!.toString();
  }

  set hatEligibility(value: string) {
    this.set("hatEligibility", Value.fromString(value));
  }

  get hatToggle(): string {
    let value = this.get("hatToggle");
    return value!.toString();
  }

  set hatToggle(value: string) {
    this.set("hatToggle", Value.fromString(value));
  }

  get hatMutable(): boolean {
    let value = this.get("hatMutable");
    return value!.toBoolean();
  }

  set hatMutable(value: boolean) {
    this.set("hatMutable", Value.fromBoolean(value));
  }

  get hatImageUri(): string {
    let value = this.get("hatImageUri");
    return value!.toString();
  }

  set hatImageUri(value: string) {
    this.set("hatImageUri", Value.fromString(value));
  }
}

export class HatMintedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HatMintedEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HatMintedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HatMintedEvent", id.toString(), this);
    }
  }

  static load(id: string): HatMintedEvent | null {
    return changetype<HatMintedEvent | null>(store.get("HatMintedEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tree(): string {
    let value = this.get("tree");
    return value!.toString();
  }

  set tree(value: string) {
    this.set("tree", Value.fromString(value));
  }

  get hat(): string {
    let value = this.get("hat");
    return value!.toString();
  }

  set hat(value: string) {
    this.set("hat", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value!.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get hatId(): string {
    let value = this.get("hatId");
    return value!.toString();
  }

  set hatId(value: string) {
    this.set("hatId", Value.fromString(value));
  }

  get wearer(): string {
    let value = this.get("wearer");
    return value!.toString();
  }

  set wearer(value: string) {
    this.set("wearer", Value.fromString(value));
  }

  get operator(): string {
    let value = this.get("operator");
    return value!.toString();
  }

  set operator(value: string) {
    this.set("operator", Value.fromString(value));
  }
}

export class HatBurnedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HatBurnedEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HatBurnedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HatBurnedEvent", id.toString(), this);
    }
  }

  static load(id: string): HatBurnedEvent | null {
    return changetype<HatBurnedEvent | null>(store.get("HatBurnedEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tree(): string {
    let value = this.get("tree");
    return value!.toString();
  }

  set tree(value: string) {
    this.set("tree", Value.fromString(value));
  }

  get hat(): string {
    let value = this.get("hat");
    return value!.toString();
  }

  set hat(value: string) {
    this.set("hat", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value!.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get hatId(): string {
    let value = this.get("hatId");
    return value!.toString();
  }

  set hatId(value: string) {
    this.set("hatId", Value.fromString(value));
  }

  get wearer(): string {
    let value = this.get("wearer");
    return value!.toString();
  }

  set wearer(value: string) {
    this.set("wearer", Value.fromString(value));
  }

  get operator(): string {
    let value = this.get("operator");
    return value!.toString();
  }

  set operator(value: string) {
    this.set("operator", Value.fromString(value));
  }
}

export class HatStatusChangedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save HatStatusChangedEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HatStatusChangedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HatStatusChangedEvent", id.toString(), this);
    }
  }

  static load(id: string): HatStatusChangedEvent | null {
    return changetype<HatStatusChangedEvent | null>(
      store.get("HatStatusChangedEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tree(): string {
    let value = this.get("tree");
    return value!.toString();
  }

  set tree(value: string) {
    this.set("tree", Value.fromString(value));
  }

  get hat(): string {
    let value = this.get("hat");
    return value!.toString();
  }

  set hat(value: string) {
    this.set("hat", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value!.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get hatId(): string {
    let value = this.get("hatId");
    return value!.toString();
  }

  set hatId(value: string) {
    this.set("hatId", Value.fromString(value));
  }

  get hatNewStatus(): boolean {
    let value = this.get("hatNewStatus");
    return value!.toBoolean();
  }

  set hatNewStatus(value: boolean) {
    this.set("hatNewStatus", Value.fromBoolean(value));
  }
}

export class HatDetailsChangedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save HatDetailsChangedEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HatDetailsChangedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HatDetailsChangedEvent", id.toString(), this);
    }
  }

  static load(id: string): HatDetailsChangedEvent | null {
    return changetype<HatDetailsChangedEvent | null>(
      store.get("HatDetailsChangedEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tree(): string {
    let value = this.get("tree");
    return value!.toString();
  }

  set tree(value: string) {
    this.set("tree", Value.fromString(value));
  }

  get hat(): string {
    let value = this.get("hat");
    return value!.toString();
  }

  set hat(value: string) {
    this.set("hat", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value!.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get hatId(): string {
    let value = this.get("hatId");
    return value!.toString();
  }

  set hatId(value: string) {
    this.set("hatId", Value.fromString(value));
  }

  get hatNewDetails(): string {
    let value = this.get("hatNewDetails");
    return value!.toString();
  }

  set hatNewDetails(value: string) {
    this.set("hatNewDetails", Value.fromString(value));
  }
}

export class HatEligibilityChangedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save HatEligibilityChangedEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HatEligibilityChangedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HatEligibilityChangedEvent", id.toString(), this);
    }
  }

  static load(id: string): HatEligibilityChangedEvent | null {
    return changetype<HatEligibilityChangedEvent | null>(
      store.get("HatEligibilityChangedEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tree(): string {
    let value = this.get("tree");
    return value!.toString();
  }

  set tree(value: string) {
    this.set("tree", Value.fromString(value));
  }

  get hat(): string {
    let value = this.get("hat");
    return value!.toString();
  }

  set hat(value: string) {
    this.set("hat", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value!.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get hatId(): string {
    let value = this.get("hatId");
    return value!.toString();
  }

  set hatId(value: string) {
    this.set("hatId", Value.fromString(value));
  }

  get hatNewEligibility(): string {
    let value = this.get("hatNewEligibility");
    return value!.toString();
  }

  set hatNewEligibility(value: string) {
    this.set("hatNewEligibility", Value.fromString(value));
  }
}

export class HatToggleChangedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save HatToggleChangedEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HatToggleChangedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HatToggleChangedEvent", id.toString(), this);
    }
  }

  static load(id: string): HatToggleChangedEvent | null {
    return changetype<HatToggleChangedEvent | null>(
      store.get("HatToggleChangedEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tree(): string {
    let value = this.get("tree");
    return value!.toString();
  }

  set tree(value: string) {
    this.set("tree", Value.fromString(value));
  }

  get hat(): string {
    let value = this.get("hat");
    return value!.toString();
  }

  set hat(value: string) {
    this.set("hat", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value!.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get hatId(): string {
    let value = this.get("hatId");
    return value!.toString();
  }

  set hatId(value: string) {
    this.set("hatId", Value.fromString(value));
  }

  get hatNewToggle(): string {
    let value = this.get("hatNewToggle");
    return value!.toString();
  }

  set hatNewToggle(value: string) {
    this.set("hatNewToggle", Value.fromString(value));
  }
}

export class HatMutabilityChangedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save HatMutabilityChangedEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HatMutabilityChangedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HatMutabilityChangedEvent", id.toString(), this);
    }
  }

  static load(id: string): HatMutabilityChangedEvent | null {
    return changetype<HatMutabilityChangedEvent | null>(
      store.get("HatMutabilityChangedEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tree(): string {
    let value = this.get("tree");
    return value!.toString();
  }

  set tree(value: string) {
    this.set("tree", Value.fromString(value));
  }

  get hat(): string {
    let value = this.get("hat");
    return value!.toString();
  }

  set hat(value: string) {
    this.set("hat", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value!.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get hatId(): string {
    let value = this.get("hatId");
    return value!.toString();
  }

  set hatId(value: string) {
    this.set("hatId", Value.fromString(value));
  }
}

export class HatMaxSupplyChangedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save HatMaxSupplyChangedEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HatMaxSupplyChangedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HatMaxSupplyChangedEvent", id.toString(), this);
    }
  }

  static load(id: string): HatMaxSupplyChangedEvent | null {
    return changetype<HatMaxSupplyChangedEvent | null>(
      store.get("HatMaxSupplyChangedEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tree(): string {
    let value = this.get("tree");
    return value!.toString();
  }

  set tree(value: string) {
    this.set("tree", Value.fromString(value));
  }

  get hat(): string {
    let value = this.get("hat");
    return value!.toString();
  }

  set hat(value: string) {
    this.set("hat", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value!.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get hatId(): string {
    let value = this.get("hatId");
    return value!.toString();
  }

  set hatId(value: string) {
    this.set("hatId", Value.fromString(value));
  }

  get hatNewMaxSupply(): BigInt {
    let value = this.get("hatNewMaxSupply");
    return value!.toBigInt();
  }

  set hatNewMaxSupply(value: BigInt) {
    this.set("hatNewMaxSupply", Value.fromBigInt(value));
  }
}

export class HatImageURIChangedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save HatImageURIChangedEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HatImageURIChangedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HatImageURIChangedEvent", id.toString(), this);
    }
  }

  static load(id: string): HatImageURIChangedEvent | null {
    return changetype<HatImageURIChangedEvent | null>(
      store.get("HatImageURIChangedEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tree(): string {
    let value = this.get("tree");
    return value!.toString();
  }

  set tree(value: string) {
    this.set("tree", Value.fromString(value));
  }

  get hat(): string {
    let value = this.get("hat");
    return value!.toString();
  }

  set hat(value: string) {
    this.set("hat", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    return value!.toBytes();
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get hatId(): string {
    let value = this.get("hatId");
    return value!.toString();
  }

  set hatId(value: string) {
    this.set("hatId", Value.fromString(value));
  }

  get hatNewImageURI(): string {
    let value = this.get("hatNewImageURI");
    return value!.toString();
  }

  set hatNewImageURI(value: string) {
    this.set("hatNewImageURI", Value.fromString(value));
  }
}
