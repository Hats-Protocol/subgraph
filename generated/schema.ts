// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Hat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Hat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Hat must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Hat", id.toString(), this);
    }
  }

  static load(id: string): Hat | null {
    return changetype<Hat | null>(store.get("Hat", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get status(): boolean {
    let value = this.get("status");
    return value!.toBoolean();
  }

  set status(value: boolean) {
    this.set("status", Value.fromBoolean(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get wearers(): Array<string> {
    let value = this.get("wearers");
    return value!.toStringArray();
  }

  set wearers(value: Array<string>) {
    this.set("wearers", Value.fromStringArray(value));
  }

  get details(): string {
    let value = this.get("details");
    return value!.toString();
  }

  set details(value: string) {
    this.set("details", Value.fromString(value));
  }

  get maxSupply(): BigInt {
    let value = this.get("maxSupply");
    return value!.toBigInt();
  }

  set maxSupply(value: BigInt) {
    this.set("maxSupply", Value.fromBigInt(value));
  }

  get eligibility(): string {
    let value = this.get("eligibility");
    return value!.toString();
  }

  set eligibility(value: string) {
    this.set("eligibility", Value.fromString(value));
  }

  get toggle(): string {
    let value = this.get("toggle");
    return value!.toString();
  }

  set toggle(value: string) {
    this.set("toggle", Value.fromString(value));
  }

  get mutable(): boolean {
    let value = this.get("mutable");
    return value!.toBoolean();
  }

  set mutable(value: boolean) {
    this.set("mutable", Value.fromBoolean(value));
  }

  get imageUri(): string {
    let value = this.get("imageUri");
    return value!.toString();
  }

  set imageUri(value: string) {
    this.set("imageUri", Value.fromString(value));
  }

  get level(): i32 {
    let value = this.get("level");
    return value!.toI32();
  }

  set level(value: i32) {
    this.set("level", Value.fromI32(value));
  }

  get tree(): string {
    let value = this.get("tree");
    return value!.toString();
  }

  set tree(value: string) {
    this.set("tree", Value.fromString(value));
  }
}

export class Wearer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Wearer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Wearer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Wearer", id.toString(), this);
    }
  }

  static load(id: string): Wearer | null {
    return changetype<Wearer | null>(store.get("Wearer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hats(): Array<string> {
    let value = this.get("hats");
    return value!.toStringArray();
  }

  set hats(value: Array<string>) {
    this.set("hats", Value.fromStringArray(value));
  }
}

export class Tree extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Tree entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Tree must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Tree", id.toString(), this);
    }
  }

  static load(id: string): Tree | null {
    return changetype<Tree | null>(store.get("Tree", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hats(): Array<string> {
    let value = this.get("hats");
    return value!.toStringArray();
  }

  set hats(value: Array<string>) {
    this.set("hats", Value.fromStringArray(value));
  }
}
