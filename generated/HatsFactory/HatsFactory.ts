// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class HatCreated extends ethereum.Event {
  get params(): HatCreated__Params {
    return new HatCreated__Params(this);
  }
}

export class HatCreated__Params {
  _event: HatCreated;

  constructor(event: HatCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get details(): string {
    return this._event.parameters[1].value.toString();
  }

  get maxSupply(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get oracle(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get conditions(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class HatRenounced extends ethereum.Event {
  get params(): HatRenounced__Params {
    return new HatRenounced__Params(this);
  }
}

export class HatRenounced__Params {
  _event: HatRenounced;

  constructor(event: HatRenounced) {
    this._event = event;
  }

  get hatId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get wearer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class HatStatusChanged extends ethereum.Event {
  get params(): HatStatusChanged__Params {
    return new HatStatusChanged__Params(this);
  }
}

export class HatStatusChanged__Params {
  _event: HatStatusChanged;

  constructor(event: HatStatusChanged) {
    this._event = event;
  }

  get hatId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newStatus(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WearerStatus extends ethereum.Event {
  get params(): WearerStatus__Params {
    return new WearerStatus__Params(this);
  }
}

export class WearerStatus__Params {
  _event: WearerStatus;

  constructor(event: WearerStatus) {
    this._event = event;
  }

  get hatId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get wearer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get revoke(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get wearerStanding(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class HatsFactory__createTopHatAndHatResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getTopHatId(): BigInt {
    return this.value0;
  }

  getFirstHatId(): BigInt {
    return this.value1;
  }
}

export class HatsFactory__viewHatResult {
  value0: string;
  value1: BigInt;
  value2: BigInt;
  value3: Address;
  value4: Address;
  value5: i32;
  value6: boolean;

  constructor(
    value0: string,
    value1: BigInt,
    value2: BigInt,
    value3: Address,
    value4: Address,
    value5: i32,
    value6: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    return map;
  }

  getDetails(): string {
    return this.value0;
  }

  getMaxSupply(): BigInt {
    return this.value1;
  }

  getSupply(): BigInt {
    return this.value2;
  }

  getOracle(): Address {
    return this.value3;
  }

  getConditions(): Address {
    return this.value4;
  }

  getLastHatId(): i32 {
    return this.value5;
  }

  getActive(): boolean {
    return this.value6;
  }
}

export class HatsFactory extends ethereum.SmartContract {
  static bind(address: Address): HatsFactory {
    return new HatsFactory("HatsFactory", address);
  }

  badStandings(param0: BigInt, param1: Address): boolean {
    let result = super.call(
      "badStandings",
      "badStandings(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_badStandings(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "badStandings",
      "badStandings(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(wearer: Address, hatId: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(wearer),
        ethereum.Value.fromUnsignedBigInt(hatId)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(wearer: Address, hatId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(wearer),
        ethereum.Value.fromUnsignedBigInt(hatId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(owners: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(owners),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    owners: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(owners),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  createHat(
    _admin: BigInt,
    _details: string,
    _maxSupply: BigInt,
    _oracle: Address,
    _conditions: Address
  ): BigInt {
    let result = super.call(
      "createHat",
      "createHat(uint256,string,uint32,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_admin),
        ethereum.Value.fromString(_details),
        ethereum.Value.fromUnsignedBigInt(_maxSupply),
        ethereum.Value.fromAddress(_oracle),
        ethereum.Value.fromAddress(_conditions)
      ]
    );

    return result[0].toBigInt();
  }

  try_createHat(
    _admin: BigInt,
    _details: string,
    _maxSupply: BigInt,
    _oracle: Address,
    _conditions: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createHat",
      "createHat(uint256,string,uint32,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_admin),
        ethereum.Value.fromString(_details),
        ethereum.Value.fromUnsignedBigInt(_maxSupply),
        ethereum.Value.fromAddress(_oracle),
        ethereum.Value.fromAddress(_conditions)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createTopHatAndHat(
    _details: string,
    _maxSupply: BigInt,
    _oracle: Address,
    _conditions: Address
  ): HatsFactory__createTopHatAndHatResult {
    let result = super.call(
      "createTopHatAndHat",
      "createTopHatAndHat(string,uint32,address,address):(uint256,uint256)",
      [
        ethereum.Value.fromString(_details),
        ethereum.Value.fromUnsignedBigInt(_maxSupply),
        ethereum.Value.fromAddress(_oracle),
        ethereum.Value.fromAddress(_conditions)
      ]
    );

    return new HatsFactory__createTopHatAndHatResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_createTopHatAndHat(
    _details: string,
    _maxSupply: BigInt,
    _oracle: Address,
    _conditions: Address
  ): ethereum.CallResult<HatsFactory__createTopHatAndHatResult> {
    let result = super.tryCall(
      "createTopHatAndHat",
      "createTopHatAndHat(string,uint32,address,address):(uint256,uint256)",
      [
        ethereum.Value.fromString(_details),
        ethereum.Value.fromUnsignedBigInt(_maxSupply),
        ethereum.Value.fromAddress(_oracle),
        ethereum.Value.fromAddress(_conditions)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new HatsFactory__createTopHatAndHatResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getAdminAtLevel(_hatId: BigInt, _level: i32): BigInt {
    let result = super.call(
      "getAdminAtLevel",
      "getAdminAtLevel(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_hatId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_level))
      ]
    );

    return result[0].toBigInt();
  }

  try_getAdminAtLevel(
    _hatId: BigInt,
    _level: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAdminAtLevel",
      "getAdminAtLevel(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_hatId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_level))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getHatLevel(_hatId: BigInt): i32 {
    let result = super.call("getHatLevel", "getHatLevel(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(_hatId)
    ]);

    return result[0].toI32();
  }

  try_getHatLevel(_hatId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("getHatLevel", "getHatLevel(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(_hatId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  hatSupply(param0: BigInt): BigInt {
    let result = super.call("hatSupply", "hatSupply(uint256):(uint32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_hatSupply(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("hatSupply", "hatSupply(uint256):(uint32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isActive(_hatId: BigInt): boolean {
    let result = super.call("isActive", "isActive(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_hatId)
    ]);

    return result[0].toBoolean();
  }

  try_isActive(_hatId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isActive", "isActive(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_hatId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAdminOfHat(_user: Address, _hatId: BigInt): boolean {
    let result = super.call(
      "isAdminOfHat",
      "isAdminOfHat(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_hatId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isAdminOfHat(
    _user: Address,
    _hatId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAdminOfHat",
      "isAdminOfHat(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_hatId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(param0: Address, param1: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isInGoodStanding(_wearer: Address, _hatId: BigInt): boolean {
    let result = super.call(
      "isInGoodStanding",
      "isInGoodStanding(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_wearer),
        ethereum.Value.fromUnsignedBigInt(_hatId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isInGoodStanding(
    _wearer: Address,
    _hatId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isInGoodStanding",
      "isInGoodStanding(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_wearer),
        ethereum.Value.fromUnsignedBigInt(_hatId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTopHat(_hatId: BigInt): boolean {
    let result = super.call("isTopHat", "isTopHat(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_hatId)
    ]);

    return result[0].toBoolean();
  }

  try_isTopHat(_hatId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isTopHat", "isTopHat(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_hatId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWearerOfHat(_user: Address, _hatId: BigInt): boolean {
    let result = super.call(
      "isWearerOfHat",
      "isWearerOfHat(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_hatId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isWearerOfHat(
    _user: Address,
    _hatId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWearerOfHat",
      "isWearerOfHat(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_hatId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastTopHatId(): BigInt {
    let result = super.call("lastTopHatId", "lastTopHatId():(uint32)", []);

    return result[0].toBigInt();
  }

  try_lastTopHatId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastTopHatId", "lastTopHatId():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintHat(_hatId: BigInt, _wearer: Address): boolean {
    let result = super.call("mintHat", "mintHat(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_hatId),
      ethereum.Value.fromAddress(_wearer)
    ]);

    return result[0].toBoolean();
  }

  try_mintHat(_hatId: BigInt, _wearer: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("mintHat", "mintHat(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_hatId),
      ethereum.Value.fromAddress(_wearer)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintTopHat(_target: Address): BigInt {
    let result = super.call("mintTopHat", "mintTopHat(address):(uint256)", [
      ethereum.Value.fromAddress(_target)
    ]);

    return result[0].toBigInt();
  }

  try_mintTopHat(_target: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mintTopHat", "mintTopHat(address):(uint256)", [
      ethereum.Value.fromAddress(_target)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pullHatStatusFromConditions(_hatId: BigInt): boolean {
    let result = super.call(
      "pullHatStatusFromConditions",
      "pullHatStatusFromConditions(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_hatId)]
    );

    return result[0].toBoolean();
  }

  try_pullHatStatusFromConditions(
    _hatId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "pullHatStatusFromConditions",
      "pullHatStatusFromConditions(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_hatId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pullHatWearerStatusFromOracle(_hatId: BigInt, _wearer: Address): boolean {
    let result = super.call(
      "pullHatWearerStatusFromOracle",
      "pullHatWearerStatusFromOracle(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_hatId),
        ethereum.Value.fromAddress(_wearer)
      ]
    );

    return result[0].toBoolean();
  }

  try_pullHatWearerStatusFromOracle(
    _hatId: BigInt,
    _wearer: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "pullHatWearerStatusFromOracle",
      "pullHatWearerStatusFromOracle(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_hatId),
        ethereum.Value.fromAddress(_wearer)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setHatStatus(_hatId: BigInt, newStatus: boolean): boolean {
    let result = super.call(
      "setHatStatus",
      "setHatStatus(uint256,bool):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_hatId),
        ethereum.Value.fromBoolean(newStatus)
      ]
    );

    return result[0].toBoolean();
  }

  try_setHatStatus(
    _hatId: BigInt,
    newStatus: boolean
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setHatStatus",
      "setHatStatus(uint256,bool):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_hatId),
        ethereum.Value.fromBoolean(newStatus)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setHatWearerStatus(
    _hatId: BigInt,
    _wearer: Address,
    _revoke: boolean,
    _wearerStanding: boolean
  ): boolean {
    let result = super.call(
      "setHatWearerStatus",
      "setHatWearerStatus(uint256,address,bool,bool):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_hatId),
        ethereum.Value.fromAddress(_wearer),
        ethereum.Value.fromBoolean(_revoke),
        ethereum.Value.fromBoolean(_wearerStanding)
      ]
    );

    return result[0].toBoolean();
  }

  try_setHatWearerStatus(
    _hatId: BigInt,
    _wearer: Address,
    _revoke: boolean,
    _wearerStanding: boolean
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setHatWearerStatus",
      "setHatWearerStatus(uint256,address,bool,bool):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_hatId),
        ethereum.Value.fromAddress(_wearer),
        ethereum.Value.fromBoolean(_revoke),
        ethereum.Value.fromBoolean(_wearerStanding)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  uri(id: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toString();
  }

  try_uri(id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  viewHat(_hatId: BigInt): HatsFactory__viewHatResult {
    let result = super.call(
      "viewHat",
      "viewHat(uint256):(string,uint32,uint32,address,address,uint8,bool)",
      [ethereum.Value.fromUnsignedBigInt(_hatId)]
    );

    return new HatsFactory__viewHatResult(
      result[0].toString(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toI32(),
      result[6].toBoolean()
    );
  }

  try_viewHat(_hatId: BigInt): ethereum.CallResult<HatsFactory__viewHatResult> {
    let result = super.tryCall(
      "viewHat",
      "viewHat(uint256):(string,uint32,uint32,address,address,uint8,bool)",
      [ethereum.Value.fromUnsignedBigInt(_hatId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new HatsFactory__viewHatResult(
        value[0].toString(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toI32(),
        value[6].toBoolean()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateHatCall extends ethereum.Call {
  get inputs(): CreateHatCall__Inputs {
    return new CreateHatCall__Inputs(this);
  }

  get outputs(): CreateHatCall__Outputs {
    return new CreateHatCall__Outputs(this);
  }
}

export class CreateHatCall__Inputs {
  _call: CreateHatCall;

  constructor(call: CreateHatCall) {
    this._call = call;
  }

  get _admin(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _details(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _maxSupply(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _oracle(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _conditions(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class CreateHatCall__Outputs {
  _call: CreateHatCall;

  constructor(call: CreateHatCall) {
    this._call = call;
  }

  get newHatId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateTopHatAndHatCall extends ethereum.Call {
  get inputs(): CreateTopHatAndHatCall__Inputs {
    return new CreateTopHatAndHatCall__Inputs(this);
  }

  get outputs(): CreateTopHatAndHatCall__Outputs {
    return new CreateTopHatAndHatCall__Outputs(this);
  }
}

export class CreateTopHatAndHatCall__Inputs {
  _call: CreateTopHatAndHatCall;

  constructor(call: CreateTopHatAndHatCall) {
    this._call = call;
  }

  get _details(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _maxSupply(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _oracle(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _conditions(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class CreateTopHatAndHatCall__Outputs {
  _call: CreateTopHatAndHatCall;

  constructor(call: CreateTopHatAndHatCall) {
    this._call = call;
  }

  get topHatId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get firstHatId(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class MintHatCall extends ethereum.Call {
  get inputs(): MintHatCall__Inputs {
    return new MintHatCall__Inputs(this);
  }

  get outputs(): MintHatCall__Outputs {
    return new MintHatCall__Outputs(this);
  }
}

export class MintHatCall__Inputs {
  _call: MintHatCall;

  constructor(call: MintHatCall) {
    this._call = call;
  }

  get _hatId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _wearer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MintHatCall__Outputs {
  _call: MintHatCall;

  constructor(call: MintHatCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MintTopHatCall extends ethereum.Call {
  get inputs(): MintTopHatCall__Inputs {
    return new MintTopHatCall__Inputs(this);
  }

  get outputs(): MintTopHatCall__Outputs {
    return new MintTopHatCall__Outputs(this);
  }
}

export class MintTopHatCall__Inputs {
  _call: MintTopHatCall;

  constructor(call: MintTopHatCall) {
    this._call = call;
  }

  get _target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class MintTopHatCall__Outputs {
  _call: MintTopHatCall;

  constructor(call: MintTopHatCall) {
    this._call = call;
  }

  get topHatId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PullHatStatusFromConditionsCall extends ethereum.Call {
  get inputs(): PullHatStatusFromConditionsCall__Inputs {
    return new PullHatStatusFromConditionsCall__Inputs(this);
  }

  get outputs(): PullHatStatusFromConditionsCall__Outputs {
    return new PullHatStatusFromConditionsCall__Outputs(this);
  }
}

export class PullHatStatusFromConditionsCall__Inputs {
  _call: PullHatStatusFromConditionsCall;

  constructor(call: PullHatStatusFromConditionsCall) {
    this._call = call;
  }

  get _hatId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PullHatStatusFromConditionsCall__Outputs {
  _call: PullHatStatusFromConditionsCall;

  constructor(call: PullHatStatusFromConditionsCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class PullHatWearerStatusFromOracleCall extends ethereum.Call {
  get inputs(): PullHatWearerStatusFromOracleCall__Inputs {
    return new PullHatWearerStatusFromOracleCall__Inputs(this);
  }

  get outputs(): PullHatWearerStatusFromOracleCall__Outputs {
    return new PullHatWearerStatusFromOracleCall__Outputs(this);
  }
}

export class PullHatWearerStatusFromOracleCall__Inputs {
  _call: PullHatWearerStatusFromOracleCall;

  constructor(call: PullHatWearerStatusFromOracleCall) {
    this._call = call;
  }

  get _hatId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _wearer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class PullHatWearerStatusFromOracleCall__Outputs {
  _call: PullHatWearerStatusFromOracleCall;

  constructor(call: PullHatWearerStatusFromOracleCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceHatCall extends ethereum.Call {
  get inputs(): RenounceHatCall__Inputs {
    return new RenounceHatCall__Inputs(this);
  }

  get outputs(): RenounceHatCall__Outputs {
    return new RenounceHatCall__Outputs(this);
  }
}

export class RenounceHatCall__Inputs {
  _call: RenounceHatCall;

  constructor(call: RenounceHatCall) {
    this._call = call;
  }

  get _hatId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RenounceHatCall__Outputs {
  _call: RenounceHatCall;

  constructor(call: RenounceHatCall) {
    this._call = call;
  }
}

export class SetHatStatusCall extends ethereum.Call {
  get inputs(): SetHatStatusCall__Inputs {
    return new SetHatStatusCall__Inputs(this);
  }

  get outputs(): SetHatStatusCall__Outputs {
    return new SetHatStatusCall__Outputs(this);
  }
}

export class SetHatStatusCall__Inputs {
  _call: SetHatStatusCall;

  constructor(call: SetHatStatusCall) {
    this._call = call;
  }

  get _hatId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newStatus(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetHatStatusCall__Outputs {
  _call: SetHatStatusCall;

  constructor(call: SetHatStatusCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetHatWearerStatusCall extends ethereum.Call {
  get inputs(): SetHatWearerStatusCall__Inputs {
    return new SetHatWearerStatusCall__Inputs(this);
  }

  get outputs(): SetHatWearerStatusCall__Outputs {
    return new SetHatWearerStatusCall__Outputs(this);
  }
}

export class SetHatWearerStatusCall__Inputs {
  _call: SetHatWearerStatusCall;

  constructor(call: SetHatWearerStatusCall) {
    this._call = call;
  }

  get _hatId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _wearer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _revoke(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _wearerStanding(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class SetHatWearerStatusCall__Outputs {
  _call: SetHatWearerStatusCall;

  constructor(call: SetHatWearerStatusCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferHatCall extends ethereum.Call {
  get inputs(): TransferHatCall__Inputs {
    return new TransferHatCall__Inputs(this);
  }

  get outputs(): TransferHatCall__Outputs {
    return new TransferHatCall__Outputs(this);
  }
}

export class TransferHatCall__Inputs {
  _call: TransferHatCall;

  constructor(call: TransferHatCall) {
    this._call = call;
  }

  get _hatId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class TransferHatCall__Outputs {
  _call: TransferHatCall;

  constructor(call: TransferHatCall) {
    this._call = call;
  }
}
